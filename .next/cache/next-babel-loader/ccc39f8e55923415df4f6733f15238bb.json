{"ast":null,"code":"var _jsxFileName = \"/Users/emeliesabel/Desktop/hyper-island/PROJECTS/portfolio-project/pages/[page].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n/* layout */\n\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n/* components */\n\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from \"../components/modules/ImageModule\";\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\n\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json());\n}\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\n\n\nconst SlugPage = ({\n  data\n}) => {\n  const {\n    content\n  } = data;\n  const codeString = JSON.stringify(content);\n  /* Now you need to map your own components, I just left the headline module as reference */\n\n  const headlineModuleData = content.body.filter(item => item.component === \"Headline Module\");\n  const imageModuleData = content.body.filter(item => item.component.includes(\"Image Module\"));\n  const paragraphModuleData = content.body.filter(item => item.component.includes(\"Paragraph Module\"));\n  return __jsx(DefaultLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, headlineModuleData ? __jsx(HeadlineModule, {\n    title: headlineModuleData.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }) : null, imageModuleData ? imageModuleData.map((module, index) => {\n    return __jsx(ImageModule, {\n      key: index,\n      image: module.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    });\n  }) : null, paragraphModuleData ? paragraphModuleData.map((module, index) => {\n    return __jsx(ParagraphModule, {\n      key: index,\n      copy: module.copy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n  }) : null);\n};\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\n\n\nSlugPage.getInitialProps = async ({\n  query\n}) => {\n  /* {query} is an object we receive within this method from Next,\n  so that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const {\n    page\n  } = query;\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\n  server-side (we are on client-side here) */\n\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`);\n  /* Returning the data back into SlugPage as props */\n\n  return {\n    data\n  };\n  /* This is the same as { data: data } */\n};\n\nexport default SlugPage;","map":{"version":3,"sources":["/Users/emeliesabel/Desktop/hyper-island/PROJECTS/portfolio-project/pages/[page].js"],"names":["fetch","DefaultLayout","HeadlineModule","ParagraphModule","ImageModule","fetchUrl","url","then","r","json","SlugPage","data","content","codeString","JSON","stringify","headlineModuleData","body","filter","item","component","imageModuleData","includes","paragraphModuleData","text","map","module","index","image","copy","getInitialProps","query","page"],"mappings":";;;;AAAA;;AAEA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA;;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAEA;;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AAEA;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAON,KAAK,CAACM,GAAD,CAAL,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAArB,CAAP;AACD;AAED;;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAcD,IAApB;AACA,QAAME,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAnB;AACA;;AAEA,QAAMI,kBAAkB,GAAGJ,OAAO,CAACK,IAAR,CAAaC,MAAb,CACzBC,IAAI,IAAIA,IAAI,CAACC,SAAL,KAAmB,iBADF,CAA3B;AAGA,QAAMC,eAAe,GAAGT,OAAO,CAACK,IAAR,CAAaC,MAAb,CACtBC,IAAI,IAAIA,IAAI,CAACC,SAAL,CAAeE,QAAf,CAAwB,cAAxB,CADc,CAAxB;AAGA,QAAMC,mBAAmB,GAAGX,OAAO,CAACK,IAAR,CAAaC,MAAb,CAAoBC,IAAI,IAClDA,IAAI,CAACC,SAAL,CAAeE,QAAf,CAAwB,kBAAxB,CAD0B,CAA5B;AAIA,SACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGN,kBAAkB,GACjB,MAAC,cAAD;AAAgB,IAAA,KAAK,EAAEA,kBAAkB,CAACQ,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADiB,GAEf,IALN,EAMGH,eAAe,GACZA,eAAe,CAACI,GAAhB,CAAoB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACrC,WAAO,MAAC,WAAD;AAAa,MAAA,GAAG,EAAEA,KAAlB;AAAyB,MAAA,KAAK,EAAED,MAAM,CAACE,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,CADY,GAIZ,IAVN,EAWGL,mBAAmB,GAChBA,mBAAmB,CAACE,GAApB,CAAwB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACzC,WAAO,MAAC,eAAD;AAAiB,MAAA,GAAG,EAAEA,KAAtB;AAA6B,MAAA,IAAI,EAAED,MAAM,CAACG,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,CADgB,GAIhB,IAfN,CADF;AAmBD,CAlCD;AAoCA;;;;AAEAnB,QAAQ,CAACoB,eAAT,GAA2B,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC9C;;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAjB;AACA;;;AAEA,QAAMpB,IAAI,GAAG,MAAMN,QAAQ,CAAE,kCAAiC2B,IAAK,EAAxC,CAA3B;AACA;;AACA,SAAO;AAAErB,IAAAA;AAAF,GAAP;AAAiB;AAClB,CATD;;AAWA,eAAeD,QAAf","sourcesContent":["/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n\n/* layout */\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n\n/* components */\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from \"../components/modules/ImageModule\";\n\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json());\n}\n\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\nconst SlugPage = ({ data }) => {\n  const { content } = data;\n  const codeString = JSON.stringify(content);\n  /* Now you need to map your own components, I just left the headline module as reference */\n\n  const headlineModuleData = content.body.filter(\n    item => item.component === \"Headline Module\"\n  );\n  const imageModuleData = content.body.filter(\n    item => item.component.includes(\"Image Module\")\n  );\n  const paragraphModuleData = content.body.filter(item =>\n    item.component.includes(\"Paragraph Module\")\n  );\n\n  return (\n    <DefaultLayout>\n      {/* <h3>ðŸŒˆ This is what you are getting back from Storyblok: ðŸŒˆ</h3>\n      <p>{codeString}</p> */}\n      {headlineModuleData ? (\n        <HeadlineModule title={headlineModuleData.text} />\n      ) : null}\n      {imageModuleData\n        ? imageModuleData.map((module, index) => {\n            return <ImageModule key={index} image={module.image} />;\n          })\n        : null}\n      {paragraphModuleData\n        ? paragraphModuleData.map((module, index) => {\n            return <ParagraphModule key={index} copy={module.copy} />;\n          })\n        : null}\n    </DefaultLayout>\n  );\n};\n\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\nSlugPage.getInitialProps = async ({ query }) => {\n  /* {query} is an object we receive within this method from Next,\n\tso that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const { page } = query;\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\n\tserver-side (we are on client-side here) */\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`);\n  /* Returning the data back into SlugPage as props */\n  return { data }; /* This is the same as { data: data } */\n};\n\nexport default SlugPage;\n"]},"metadata":{},"sourceType":"module"}