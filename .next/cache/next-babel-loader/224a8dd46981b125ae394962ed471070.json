{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/emeliesabel/Desktop/hyper-island/PROJECTS/portfolio-project/pages/[page].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n/* layout */\n\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n/* components */\n\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from \"../components/modules/ImageModule\";\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\n\nfunction fetchUrl(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n}\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\n\n\nvar SlugPage = function SlugPage(_ref) {\n  var data = _ref.data;\n  var content = data.content;\n\n  var codeString = _JSON$stringify(content);\n  /* Now you need to map your own components, I just left the headline module as reference */\n\n\n  var headlineModuleData = content.body.find(function (item) {\n    return item.component === \"Headline Module\";\n  });\n  var imageModuleData = content.body.find(function (item) {\n    return item.component === \"Image Module\";\n  });\n  var paragraphModuleData = content.body.filter(function (item) {\n    return item.component.includes('Paragraph Module');\n  });\n  return __jsx(DefaultLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, headlineModuleData ? __jsx(HeadlineModule, {\n    title: headlineModuleData.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }) : null, imageModuleData ? __jsx(ImageModule, {\n    image: imageModuleData.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }) : null, paragraphModuleData ? paragraphModuleData.map(function (module, index) {\n    return __jsx(ParagraphModule, {\n      key: index,\n      copy: module.copy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n  }) : null);\n};\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\n\n\nSlugPage.getInitialProps = function _callee(_ref2) {\n  var query, page, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref2.query;\n\n          /* {query} is an object we receive within this method from Next,\n          so that we can retrieve the slug (e.g. '/welcome') coming with the route */\n          page = query.page;\n          /* Calling our internal api endpoint so that we can fetch Storyblok content\n          server-side (we are on client-side here) */\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetchUrl(\"http://localhost:3000/api/page/\".concat(page)));\n\n        case 4:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default SlugPage;","map":{"version":3,"sources":["/Users/emeliesabel/Desktop/hyper-island/PROJECTS/portfolio-project/pages/[page].js"],"names":["fetch","DefaultLayout","HeadlineModule","ParagraphModule","ImageModule","fetchUrl","url","then","r","json","SlugPage","data","content","codeString","headlineModuleData","body","find","item","component","imageModuleData","paragraphModuleData","filter","includes","text","image","map","module","index","copy","getInitialProps","query","page"],"mappings":";;;;;;AAAA;;AAEA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA;;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAEA;;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AAEA;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAON,KAAK,CAACM,GAAD,CAAL,CAAWC,IAAX,CAAgB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,GAAjB,CAAP;AACD;AAED;;;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAAA,MACrBC,OADqB,GACTD,IADS,CACrBC,OADqB;;AAE7B,MAAMC,UAAU,GAAG,gBAAeD,OAAf,CAAnB;AACA;;;AAEA,MAAME,kBAAkB,GAAGF,OAAO,CAACG,IAAR,CAAaC,IAAb,CACzB,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,SAAL,KAAmB,iBAAvB;AAAA,GADqB,CAA3B;AAGA,MAAMC,eAAe,GAAGP,OAAO,CAACG,IAAR,CAAaC,IAAb,CACtB,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,SAAL,KAAmB,cAAvB;AAAA,GADkB,CAAxB;AAGA,MAAME,mBAAmB,GAAGR,OAAO,CAACG,IAAR,CAAaM,MAAb,CAAoB,UAAAJ,IAAI;AAAA,WACpDA,IAAI,CAACC,SAAL,CAAeI,QAAf,CAAwB,kBAAxB,CADoD;AAAA,GAAxB,CAA5B;AAIA,SACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGR,kBAAkB,GACjB,MAAC,cAAD;AAAgB,IAAA,KAAK,EAAEA,kBAAkB,CAACS,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADiB,GAEf,IALN,EAMGJ,eAAe,GAAG,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEA,eAAe,CAACK,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAmD,IANrE,EAOGJ,mBAAmB,GACpBA,mBAAmB,CAACK,GAApB,CAAwB,UAACC,MAAD,EAASC,KAAT,EAAmB;AAC3C,WAAO,MAAC,eAAD;AAAiB,MAAA,GAAG,EAAEA,KAAtB;AAA6B,MAAA,IAAI,EAAED,MAAM,CAACE,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACC,GAFD,CADoB,GAIpB,IAXF,CADF;AAiBD,CAhCD;AAkCA;;;;AAEAlB,QAAQ,CAACmB,eAAT,GAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,KAAT,SAASA,KAAT;;AACzB;;AAEQC,UAAAA,IAHiB,GAGRD,KAHQ,CAGjBC,IAHiB;AAIzB;;;AAJyB;AAAA,2CAMN1B,QAAQ,0CAAmC0B,IAAnC,EANF;;AAAA;AAMnBpB,UAAAA,IANmB;AAAA,2CAQlB;AAAEA,YAAAA,IAAI,EAAJA;AAAF,WARkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAWA,eAAeD,QAAf","sourcesContent":["/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n\n/* layout */\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n\n/* components */\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from \"../components/modules/ImageModule\";\n\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json());\n}\n\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\nconst SlugPage = ({ data }) => {\n  const { content } = data;\n  const codeString = JSON.stringify(content);\n  /* Now you need to map your own components, I just left the headline module as reference */\n\n  const headlineModuleData = content.body.find(\n    item => item.component === \"Headline Module\"\n  );\n  const imageModuleData = content.body.find(\n    item => item.component === \"Image Module\"\n  );\n  const paragraphModuleData = content.body.filter(item =>\n\t\titem.component.includes('Paragraph Module')\n  );\n\n  return (\n    <DefaultLayout>\n      {/* <h3>ðŸŒˆ This is what you are getting back from Storyblok: ðŸŒˆ</h3>\n      <p>{codeString}</p> */}\n      {headlineModuleData ? (\n        <HeadlineModule title={headlineModuleData.text} />\n      ) : null}\n      {imageModuleData ? <ImageModule image={imageModuleData.image} /> : null}\n      {paragraphModuleData\n\t\t\t\t? paragraphModuleData.map((module, index) => {\n\t\t\t\t\t\treturn <ParagraphModule key={index} copy={module.copy} />;\n\t\t\t\t  })\n\t\t\t\t: null}\n        \n    </DefaultLayout>\n  \n  );\n};\n\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\nSlugPage.getInitialProps = async ({ query }) => {\n  /* {query} is an object we receive within this method from Next,\n\tso that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const { page } = query;\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\n\tserver-side (we are on client-side here) */\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`);\n  /* Returning the data back into SlugPage as props */\n  return { data }; /* This is the same as { data: data } */\n};\n\nexport default SlugPage;\n"]},"metadata":{},"sourceType":"module"}